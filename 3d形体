import controlP5.*;
import peasy.*;
import nervoussystem.obj.*;

int sectionSideNum = 10;
int sideDivision = 50;
int cylinderHeightSection = 180;
float cylinderSectionHeight = 20;
int R = 24;
int G = 99;
int B = 156;
int u=1;
int v=1;

float sectionRadiusPhase = TWO_PI;
float twistPhase = PI*2/3;
float twistPhaseStart = TWO_PI;

float[] sectionR = new float[cylinderHeightSection+1];
float[] sectionTwistPhase = new float[cylinderHeightSection+1];
String timestamp;
PeasyCam cam;
ControlP5 bar;

boolean displayMesh = false;
boolean record;

void setup() {
  size(960, 960, P3D);
  cam = new PeasyCam(this, 2000);
  initiateValues();
  UI();
}

void initiateValues() {
  for (int  i =0; i < cylinderHeightSection+1; i ++) {
    sectionR[i] = 100 + 50 * sin((sectionRadiusPhase/cylinderHeightSection) * i);
    sectionTwistPhase[i] = twistPhase * cos((twistPhaseStart*2/cylinderHeightSection) * i);
  }
}

void draw() {
  background(51);
  noStroke();
  ambientLight(R,G,B);

  if (displayMesh) {
    stroke(0);
  }

  fill(202);
  noStroke();

  lightSettings(); 

  if (record) {
   timestamp = year() + nf(month(), 2) + nf(day(), 2) + "-"  + nf(hour(), 2) + nf(minute(), 2) + nf(second(), 2);
   beginRecord("nervoussystem.obj.OBJExport", "C:/Users/30957/Desktop" + timestamp + ".obj");

  }

  initiateValues();
  drawCylinder();

  if (record) {
    endRecord();
    record = false;
  }

  UIShow();
}

void drawCylinder() {
  float theta = TWO_PI / sectionSideNum;

  beginShape(TRIANGLES);
  for (int j = 0; j < cylinderHeightSection; j=j+u) {
    for (int i = 0; i < sectionSideNum; i=i+v) {
      float x11 = sectionR[j] * cos(theta * i + sectionTwistPhase[j]);
      float y11 = sectionR[j] * sin(theta * i + sectionTwistPhase[j]);
      float x12 = sectionR[j] * cos(theta * ((i+1)%sectionSideNum) + sectionTwistPhase[j]);
      float y12 = sectionR[j] * sin(theta * ((i+1)%sectionSideNum) + sectionTwistPhase[j]);

      float x21 = sectionR[j+1] * cos(theta * i + sectionTwistPhase[j+1]);
      float y21 = sectionR[j+1] * sin(theta * i + sectionTwistPhase[j+1]);
      float x22 = sectionR[j+1] * cos(theta * ((i+1)%sectionSideNum) + sectionTwistPhase[j+1]);
      float y22 = sectionR[j+1] * sin(theta * ((i+1)%sectionSideNum) + sectionTwistPhase[j+1]);


      float deltaX12 = (x12 - x11) / sideDivision;
      float deltay12 = (y12 - y11) / sideDivision;
      float deltaX22 = (x22 - x21) / sideDivision;
      float deltay22 = (y22 - y21) / sideDivision;

      //beginShape(TRIANGLES);
      for (int k = 0; k < sideDivision; k ++) {
        vertex(x11 + deltaX12 * k, y11 + deltay12 * k, cylinderSectionHeight * j);
        vertex(x21 + deltaX22 * (k+1), y21 + deltay22 * (k+1), cylinderSectionHeight * (j+1));
        vertex(x11 + deltaX12 * (k+1), y11 + deltay12 * (k+1), cylinderSectionHeight * j);

        vertex(x11 + deltaX12 * k, y11 + deltay12 * k, cylinderSectionHeight * j);
        vertex(x21 + deltaX22 * k, y21 + deltay22 * k, cylinderSectionHeight * (j+1));
        vertex(x21 + deltaX22 * (k+1), y21 + deltay22 * (k+1), cylinderSectionHeight * (j+1));
      }
      //endShape();
    }
  }
  endShape();
   // 绘制底面
  beginShape(TRIANGLE_FAN);
  for (int i = 0; i < sectionSideNum; i++) {
    float x = sectionR[0] * cos(theta * i + sectionTwistPhase[0]);
    float y = sectionR[0] * sin(theta * i + sectionTwistPhase[0]);
    vertex(x, y, 0); // 设置底面的高度为0，可以根据需求调整
  }
  endShape();
}

void keyPressed() {
  print(key);
  if (key == 's') {
    record = true;
  }
}
